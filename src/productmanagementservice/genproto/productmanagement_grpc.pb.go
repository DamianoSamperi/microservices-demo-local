// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: productmanagement.proto

package productmanagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductManagementService_AddProduct_FullMethodName    = "/productmanagement.ProductManagementService/AddProduct"
	ProductManagementService_DeleteProduct_FullMethodName = "/productmanagement.ProductManagementService/DeleteProduct"
)

// ProductManagementServiceClient is the client API for ProductManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManagementServiceClient interface {
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
}

type productManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManagementServiceClient(cc grpc.ClientConnInterface) ProductManagementServiceClient {
	return &productManagementServiceClient{cc}
}

func (c *productManagementServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, ProductManagementService_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, ProductManagementService_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManagementServiceServer is the server API for ProductManagementService service.
// All implementations must embed UnimplementedProductManagementServiceServer
// for forward compatibility
type ProductManagementServiceServer interface {
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	mustEmbedUnimplementedProductManagementServiceServer()
}

// UnimplementedProductManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductManagementServiceServer struct {
}

func (UnimplementedProductManagementServiceServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductManagementServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductManagementServiceServer) mustEmbedUnimplementedProductManagementServiceServer() {
}

// UnsafeProductManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManagementServiceServer will
// result in compilation errors.
type UnsafeProductManagementServiceServer interface {
	mustEmbedUnimplementedProductManagementServiceServer()
}

func RegisterProductManagementServiceServer(s grpc.ServiceRegistrar, srv ProductManagementServiceServer) {
	s.RegisterService(&ProductManagementService_ServiceDesc, srv)
}

func _ProductManagementService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManagementService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagementService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManagementService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManagementService_ServiceDesc is the grpc.ServiceDesc for ProductManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productmanagement.ProductManagementService",
	HandlerType: (*ProductManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _ProductManagementService_AddProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductManagementService_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productmanagement.proto",
}
